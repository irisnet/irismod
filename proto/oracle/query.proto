syntax = "proto3";
package irismod.oracle;

import "oracle/oracle.proto";
import "service/service.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/coin.proto";

option go_package = "github.com/irisnet/irismod/modules/oracle/types";

// Query creates service with guardian as rpc
service Query {
    // Feed queries the feed
    rpc Feed(QueryFeedRequest) returns (QueryFeedResponse) {
        option (google.api.http).get = "/irismod/oracle/feeds/{feed_name}";
    }

    // QueryFeedsRequest queries the feed list
    rpc Feeds(QueryFeedsRequest) returns (QueryFeedsResponse) {
        option (google.api.http).get = "/irismod/oracle/feeds";
    }

    // FeedValue queries the feed value
    rpc FeedValue(QueryFeedValueRequest) returns (QueryFeedValueResponse) {
        option (google.api.http).get = "/irismod/oracle/feeds/{feed_name}/values";
    }
}

// QueryFeedRequest is request type for the Query/Feed RPC method
message QueryFeedRequest {
    string feed_name = 1;
}

// QueryFeedResponse is response type for the Query/Feed RPC method
message QueryFeedResponse {
    FeedContext feed = 1 [ (gogoproto.nullable) = false ];
}

// QueryFeedsRequest is request type for the Query/Feeds RPC method
message QueryFeedsRequest {
    string state = 1;
}

// QueryFeedsResponse is response type for the Query/Feeds RPC method
message QueryFeedsResponse {
    repeated FeedContext feeds = 1 [ (gogoproto.nullable) = false ];
}

// QueryFeedValueRequest is request type for the Query/FeedValue RPC method
message QueryFeedValueRequest {
    string feed_name = 1;
}

// QueryFeedValueResponse is response type for the Query/FeedValue RPC method
message QueryFeedValueResponse {
    repeated FeedValue feed_values = 1 [ (gogoproto.nullable) = false ];
}

// FeedContext defines the feed context struct
message FeedContext {
    option (gogoproto.goproto_stringer) = false;

    Feed feed = 1;
    string service_name = 2 [ (gogoproto.moretags) = "yaml:\"service_name\"" ];
    repeated bytes providers = 3 [ (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
    string input = 4;
    int64 timeout = 5;
    repeated cosmos.base.v1beta1.Coin service_fee_cap = 6 [ (gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "yaml:\"service_fee_cap\"" ];
    uint64 repeated_frequency = 7 [ (gogoproto.moretags) = "yaml:\"repeated_frequency\"" ];
    uint32 response_threshold = 8 [ (gogoproto.moretags) = "yaml:\"response_threshold\"" ];
    irismod.service.RequestContextState state = 9;
}
