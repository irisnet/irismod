syntax = "proto3";
package irismod.nft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nft/nft.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/irisnet/irismod/modules/nft/types";

// Query defines the gRPC querier service for NFT module
service Query {
  // Supply queries the total supply of a given denom or owner
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get = "/irismod/nft/collections/{denom_id}/supply";
  }

  // NFTsOfOwner queries the NFTs of the specified owner
  rpc NFTsOfOwner(QueryNFTsOfOwnerRequest) returns (QueryNFTsOfOwnerResponse) {
    option (google.api.http).get = "/irismod/nft/nfts";
  }

  // Collection queries the NFTs of the specified denom
  rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
    option (google.api.http).get = "/irismod/nft/collections/{denom_id}";
  }

  // Denom queries the definition of a given denom
  rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
    option (google.api.http).get = "/irismod/nft/denoms/{denom_id}";
  }

  // Denoms queries all the denoms
  rpc Denoms(QueryDenomsRequest) returns (QueryDenomsResponse) {
    option (google.api.http).get = "/irismod/nft/denoms";
  }

  // NFT queries the NFT for the given denom and token ID
  rpc NFT(QueryNFTRequest) returns (QueryNFTResponse) {
    option (google.api.http).get = "/irismod/nft/nfts/{denom_id}/{token_id}";
  }

  // Rental Plugin Query Service

  // UserOf queries the user/renter of an NFT
  rpc UserOf(QueryUserOfRequest) returns (QueryUserOfResponse) {
    option (google.api.http).get = "/irismod/rental/user/{denom_id}/{nft_id}";
  }

  // UserOf queries the rental expiry of an NFT
  rpc UserExpires(QueryUserExpiresRequest) returns (QueryUserExpiresResponse) {
    option (google.api.http).get =
        "/irismod/rental/expires/{denom_id}/{nft_id}";
  }

  // HasUser queries if an NFT has a user/renter
  rpc HasUser(QueryHasUserRequest) returns (QueryHasUserResponse) {
    option (google.api.http).get =
        "/irismod/rental/has_user/{denom_id}/{nft_id}";
  }
}

// QuerySupplyRequest is the request type for the Query/HTLC RPC method
message QuerySupplyRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse { uint64 amount = 1; }

// QueryNFTsOfOwnerRequest is the request type for the Query/NFTsOfOwner RPC
// method
message QueryNFTsOfOwnerRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryNFTsOfOwnerResponse is the response type for the Query/NFTsOfOwner RPC
// method
message QueryNFTsOfOwnerResponse {
  Owner owner = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryCollectionRequest is the request type for the Query/Collection RPC
// method
message QueryCollectionRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryCollectionResponse is the response type for the Query/Collection RPC
// method
message QueryCollectionResponse {
  Collection collection = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDenomRequest is the request type for the Query/Denom RPC method
message QueryDenomRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
}

// QueryDenomResponse is the response type for the Query/Denom RPC method
message QueryDenomResponse { Denom denom = 1; }

// QueryDenomsRequest is the request type for the Query/Denoms RPC method
message QueryDenomsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDenomsResponse is the response type for the Query/Denoms RPC method
message QueryDenomsResponse {
  repeated Denom denoms = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryNFTRequest is the request type for the Query/NFT RPC method
message QueryNFTRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string token_id = 2 [ (gogoproto.moretags) = "yaml:\"token_id\"" ];
}

// QueryNFTResponse is the response type for the Query/NFT RPC method
message QueryNFTResponse { BaseNFT nft = 1 [ (gogoproto.customname) = "NFT" ]; }

// Rental Plugin Query Message Definition

// QueryUserOfRequest is the request type for the Query/Renter RPC method
message QueryUserOfRequest {
  string denom_id = 1;
  string nft_id = 2;
}

// QueryUserOfResponse is the response type for the Query/Renter RPC method
message QueryUserOfResponse { string user = 1; }

// QueryExpiresRequest is the request type for the Query/Expires RPC method
message QueryUserExpiresRequest {
  string denom_id = 1;
  string nft_id = 2;
}

// QueryExpiresResponse is the response type for the Query/Expires RPC method
message QueryUserExpiresResponse { int64 expiry = 1; }

// QueryHasUserRequest is the request type for the Query/HasUser RPC method
message QueryHasUserRequest {
  string denom_id = 1;
  string nft_id = 2;
}

// QueryHasUserResponse is the response type for the Query/HasUser RPC method
message QueryHasUserResponse { bool has_user = 1; }