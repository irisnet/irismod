syntax = "proto3";
package irismod.nft;

import "gogoproto/gogo.proto";
import "nft/rental.proto";

option go_package = "github.com/irisnet/irismod/modules/nft/types";
option (gogoproto.goproto_getters_all) = false;

// BaseNFT defines a non-fungible token
message BaseNFT {
  option (gogoproto.equal) = true;

  string id = 1;
  string name = 2;
  string uri = 3 [ (gogoproto.customname) = "URI" ];
  string data = 4;
  string owner = 5;
  string uri_hash = 6;
}

message PluginInfo {
  // RoyaltyInfo royaltyInfo = 1 [] ;
  RentalInfo rentalInfo = 2 [ (gogoproto.jsontag) = "irismod:4907" ];
}

message NFTMetadata {
  option (gogoproto.equal) = true;

  string name = 1;
  string data = 2;
  // RoyaltyInfo royaltyInfo = 3 [];
  RentalInfo rentalInfo = 4 [ (gogoproto.jsontag) = "irismod:4907" ];
}

// Denom defines a type of NFT
message Denom {
  option (gogoproto.equal) = true;

  string id = 1;
  string name = 2;
  string schema = 3;
  string creator = 4;
  string symbol = 5;
  bool mint_restricted = 6;
  bool update_restricted = 7;
  string description = 8;
  string uri = 9;
  string uri_hash = 10;
  string data = 11;
}

// The message is an intermediate struct for composing user data and plugin
// config
message DenomComposedData {
  string userData = 1;
  DenomPlugin denomPlugin = 2;
}

message DenomPlugin {
  // RoyaltyPlugin royaltyPlugin = 1 [] ;
  RentalPlugin rentalPlugin = 2 [ (gogoproto.jsontag) = "irismod:4907" ];
}

message DenomMetadata {
  option (gogoproto.equal) = true;

  string creator = 1;
  string schema = 2;
  bool mint_restricted = 3;
  bool update_restricted = 4;
  string data = 5;

  // RoyaltyPlugin royaltyPlugin = 6 [];
  RentalPlugin rentalPlugin = 7 [ (gogoproto.jsontag) = "irismod:4907" ];
}

// IDCollection defines a type of collection with specified ID
message IDCollection {
  option (gogoproto.equal) = true;

  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  repeated string token_ids = 2 [ (gogoproto.moretags) = "yaml:\"token_ids\"" ];
}

// Owner defines a type of owner
message Owner {
  option (gogoproto.equal) = true;

  string address = 1;
  repeated IDCollection id_collections = 2 [
    (gogoproto.moretags) = "yaml:\"idcs\"",
    (gogoproto.customname) = "IDCollections",
    (gogoproto.nullable) = false
  ];
}

// Collection defines a type of collection
message Collection {
  option (gogoproto.equal) = true;

  Denom denom = 1 [ (gogoproto.nullable) = false ];
  repeated BaseNFT nfts = 2
      [ (gogoproto.customname) = "NFTs", (gogoproto.nullable) = false ];
}