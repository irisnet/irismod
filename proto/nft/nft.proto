syntax = "proto3";
package irismod.nft;

import "gogoproto/gogo.proto";

option go_package = "github.com/irisnet/irismod/modules/nft/types";
option (gogoproto.goproto_getters_all) = false;

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    bytes sender = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom = 2;
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    bytes sender = 6 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes recipient = 7 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom = 2;
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    bytes sender = 6 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom = 2;
    string name = 3;
    string uri = 4 [(gogoproto.customname) = "URI"];
    string data = 5;
    bytes sender = 6 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes recipient = 7 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom = 2;
    bytes sender = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// BaseNFT defines a non fungible token.
message BaseNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string uri = 3 [(gogoproto.customname) = "URI"];
    string data = 4;
    bytes owner = 5 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// Denom defines a type of NFT.
message Denom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    bytes creator = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

message IDCollection {
    option (gogoproto.equal) = true;

    string denom = 1;
    repeated string ids = 2;
}

message Owner {
    option (gogoproto.equal) = true;

    bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    repeated IDCollection id_collections = 2 [(gogoproto.moretags) = "yaml:\"idcs\"", (gogoproto.customname) = "IDCollections", (gogoproto.nullable) = false];
}

message Collection {
    option (gogoproto.equal) = true;

    Denom denom = 1 [(gogoproto.nullable) = false];
    repeated BaseNFT nfts = 2 [(gogoproto.customname) = "NFTs", (gogoproto.nullable) = false];
}