syntax = "proto3";
package irismod.coinswap;

import "cosmos_proto/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/irisnet/irismod/modules/coinswap/types";
option (gogoproto.goproto_getters_all) = false;

// MsgAddLiquidity represents a msg for adding liquidity to a reserve pool
message MsgAddLiquidity {
    cosmos.base.v1beta1.Coin max_token = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"max_token\""];
    string exact_standard_amt = 2 [(gogoproto.moretags) = "yaml:\"exact_standard_amt\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    string min_liquidity = 3 [(gogoproto.moretags) = "yaml:\"min_liquidity\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    int64 deadline = 4;
    bytes sender = 5 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgRemoveLiquidity - struct for removing liquidity from a reserve pool
message MsgRemoveLiquidity {
    cosmos.base.v1beta1.Coin withdraw_liquidity = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"withdraw_liquidity\""];
    string min_token = 2 [(gogoproto.moretags) = "yaml:\"min_token\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    string min_standard_amt = 3 [(gogoproto.moretags) = "yaml:\"min_standard_amt\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
    int64 deadline = 4;
    bytes sender = 5 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// MsgSwapOrder represents a msg for swap order
message MsgSwapOrder {
    Input input = 1 [(gogoproto.nullable) = false];
    Output output = 2 [(gogoproto.nullable) = false];
    int64 deadline = 3;
    bool is_buy_order = 4 [(gogoproto.moretags) = "yaml:\"is_buy_order\""];
}

// Input defines the properties of order's input
message Input {
    bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    cosmos.base.v1beta1.Coin coin = 2 [(gogoproto.nullable) = false];
}

// Output defines the properties of order's output
message Output {
    bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    cosmos.base.v1beta1.Coin coin = 2 [(gogoproto.nullable) = false];
}

// token parameters
message Params {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = false;

    cosmos.base.v1beta1.Coin fee = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

    string standard_denom = 2 [(gogoproto.moretags) = "yaml:\"standard_denom\""];
}
