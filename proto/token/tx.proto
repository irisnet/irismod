syntax = "proto3";
package irismod.token;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/irisnet/irismod/modules/token/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the oracle Msg service
service Msg {
  // IssueToken defines a method for issuing a new token
  rpc IssueToken(MsgIssueToken) returns (MsgIssueTokenResponse);

  // EditToken defines a method for editing a token
  rpc EditToken(MsgEditToken) returns (MsgEditTokenResponse);

  // MintToken defines a method for minting some tokens
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  // BurnToken defines a method for burning some tokens
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);

  // TransferTokenOwner defines a method for minting some tokens
  rpc TransferTokenOwner(MsgTransferTokenOwner)
      returns (MsgTransferTokenOwnerResponse);

  // SwapFeeToken defines a method for swap some fee token
  rpc SwapFeeToken(MsgSwapFeeToken) returns (MsgSwapFeeTokenResponse);
}

// MsgIssueToken defines an SDK message for issuing a new token
message MsgIssueToken {
  string symbol = 1;
  string name = 2;
  uint32 scale = 3;
  string min_unit = 4 [ (gogoproto.moretags) = "yaml:\"min_unit\"" ];
  uint64 initial_supply = 5
      [ (gogoproto.moretags) = "yaml:\"initial_supply\"" ];
  uint64 max_supply = 6 [ (gogoproto.moretags) = "yaml:\"max_supply\"" ];
  bool mintable = 7;
  string owner = 8;
}

// MsgIssueTokenResponse defines the Msg/IssueToken response type
message MsgIssueTokenResponse {}

// MsgTransferTokenOwner defines an SDK message for transferring the token owner
message MsgTransferTokenOwner {
  string src_owner = 1 [ (gogoproto.moretags) = "yaml:\"src_owner\"" ];
  string dst_owner = 2 [ (gogoproto.moretags) = "yaml:\"dst_owner\"" ];
  string symbol = 3;
}

// MsgTransferTokenOwnerResponse defines the Msg/TransferTokenOwner response
// type
message MsgTransferTokenOwnerResponse {}

// MsgEditToken defines an SDK message for editing a new token
message MsgEditToken {
  string symbol = 1;
  string name = 2;
  uint64 max_supply = 3 [ (gogoproto.moretags) = "yaml:\"max_supply\"" ];
  string mintable = 4 [ (gogoproto.casttype) = "Bool" ];
  string owner = 5;
}

// MsgEditTokenResponse defines the Msg/EditToken response type
message MsgEditTokenResponse {}

// MsgMintToken defines an SDK message for minting a new token
message MsgMintToken {
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  string to = 2;
  string owner = 3;
}

// MsgMintTokenResponse defines the Msg/MintToken response type
message MsgMintTokenResponse {}

// MsgBurnToken defines an SDK message for burning some tokens
message MsgBurnToken {
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  string sender = 2;
}

// MsgBurnTokenResponse defines the Msg/BurnToken response type
message MsgBurnTokenResponse {}

// MsgSwapFeeToken defines an SDK message for swap fee token
message MsgSwapFeeToken {
  cosmos.base.v1beta1.Coin fee_paid = 1 [ (gogoproto.nullable) = false ];
  string recipient = 2;
  string sender = 3;
}

// MsgSwapFeeTokenResponse defines the Msg/SwapFeeToken response type
message MsgSwapFeeTokenResponse {
  cosmos.base.v1beta1.Coin fee_got = 1 [ (gogoproto.nullable) = false ];
}