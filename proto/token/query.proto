syntax = "proto3";
package irismod.token;

import "cosmos_proto/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos_proto/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "token/token.proto";

option go_package = "github.com/irisnet/irismod/modules/token/types";

// Query creates service with token as rpc
service Query {
    // Token returns token with token name
    rpc Token (QueryTokenRequest) returns (QueryTokenResponse) {
      option (google.api.http).get = "/irismod/token/tokens/{denom}";
    }
    // Tokens returns the token list
    rpc Tokens (QueryTokensRequest) returns (QueryTokensResponse) {
      option (google.api.http).get = "/irismod/token/tokens";
    }
    // Fees returns the fees to issue or mint a token
    rpc Fees (QueryFeesRequest) returns (QueryFeesResponse) {
      option (google.api.http).get = "/irismod/token/{symbol}/fees";
    }
    // Params queries the token parameters
    rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/irismod/token/params";
    }
}

// QueryTokenRequest is request type for the Query/Token RPC method
message QueryTokenRequest {
    string denom = 1;
}

// QueryTokenResponse is response type for the Query/Token RPC method
message QueryTokenResponse {
    google.protobuf.Any Token = 1 [(cosmos_proto.accepts_interface) = "ContentI"];
}

// QueryTokensRequest is request type for the Query/Tokens RPC method
message QueryTokensRequest {
    bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}

// QueryTokensResponse is response type for the Query/Tokens RPC method
message QueryTokensResponse {
    repeated google.protobuf.Any Tokens = 1 [(cosmos_proto.accepts_interface) = "ContentI"];
}

// QueryFeesRequest is request type for the Query/Fees RPC method
message QueryFeesRequest {
    string symbol = 1;
}

// QueryFeesResponse is response type for the Query/Fees RPC method
message QueryFeesResponse {
    bool exist = 1;
    cosmos.base.v1beta1.Coin issue_fee = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"issue_fee\"", (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
    cosmos.base.v1beta1.Coin mint_fee = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"mint_fee\"", (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// QueryParametersRequest is request type for the Query/Parameters RPC method
message QueryParamsRequest {
}

// QueryParametersResponse is response type for the Query/Parameters RPC method
message QueryParamsResponse {
    token.Params params = 1 [(gogoproto.nullable) = false];

    cosmos.query.PageResponse res = 2;
}
