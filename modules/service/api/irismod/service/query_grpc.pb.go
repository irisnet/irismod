// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: irismod/service/query.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Definition_FullMethodName       = "/irismod.service.Query/Definition"
	Query_Binding_FullMethodName          = "/irismod.service.Query/Binding"
	Query_Bindings_FullMethodName         = "/irismod.service.Query/Bindings"
	Query_WithdrawAddress_FullMethodName  = "/irismod.service.Query/WithdrawAddress"
	Query_RequestContext_FullMethodName   = "/irismod.service.Query/RequestContext"
	Query_Request_FullMethodName          = "/irismod.service.Query/Request"
	Query_Requests_FullMethodName         = "/irismod.service.Query/Requests"
	Query_RequestsByReqCtx_FullMethodName = "/irismod.service.Query/RequestsByReqCtx"
	Query_Response_FullMethodName         = "/irismod.service.Query/Response"
	Query_Responses_FullMethodName        = "/irismod.service.Query/Responses"
	Query_EarnedFees_FullMethodName       = "/irismod.service.Query/EarnedFees"
	Query_Schema_FullMethodName           = "/irismod.service.Query/Schema"
	Query_Params_FullMethodName           = "/irismod.service.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Definition returns service definition
	Definition(ctx context.Context, in *QueryDefinitionRequest, opts ...grpc.CallOption) (*QueryDefinitionResponse, error)
	// Binding returns service Binding with service name and provider
	Binding(ctx context.Context, in *QueryBindingRequest, opts ...grpc.CallOption) (*QueryBindingResponse, error)
	// Bindings returns all service Bindings with service name and owner
	Bindings(ctx context.Context, in *QueryBindingsRequest, opts ...grpc.CallOption) (*QueryBindingsResponse, error)
	// WithdrawAddress returns the withdraw address of the binding owner
	WithdrawAddress(ctx context.Context, in *QueryWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawAddressResponse, error)
	// RequestContext returns the request context
	RequestContext(ctx context.Context, in *QueryRequestContextRequest, opts ...grpc.CallOption) (*QueryRequestContextResponse, error)
	// Request returns the request
	Request(ctx context.Context, in *QueryRequestRequest, opts ...grpc.CallOption) (*QueryRequestResponse, error)
	// Request returns all requests of one service with provider
	Requests(ctx context.Context, in *QueryRequestsRequest, opts ...grpc.CallOption) (*QueryRequestsResponse, error)
	// RequestsByReqCtx returns all requests of one service call batch
	RequestsByReqCtx(ctx context.Context, in *QueryRequestsByReqCtxRequest, opts ...grpc.CallOption) (*QueryRequestsByReqCtxResponse, error)
	// Response returns the response of request
	Response(ctx context.Context, in *QueryResponseRequest, opts ...grpc.CallOption) (*QueryResponseResponse, error)
	// Responses returns all responses of one service call batch
	Responses(ctx context.Context, in *QueryResponsesRequest, opts ...grpc.CallOption) (*QueryResponsesResponse, error)
	// EarnedFees returns the earned service fee of one provider
	EarnedFees(ctx context.Context, in *QueryEarnedFeesRequest, opts ...grpc.CallOption) (*QueryEarnedFeesResponse, error)
	// Schema returns the schema
	Schema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QuerySchemaResponse, error)
	// Params queries the service parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Definition(ctx context.Context, in *QueryDefinitionRequest, opts ...grpc.CallOption) (*QueryDefinitionResponse, error) {
	out := new(QueryDefinitionResponse)
	err := c.cc.Invoke(ctx, Query_Definition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Binding(ctx context.Context, in *QueryBindingRequest, opts ...grpc.CallOption) (*QueryBindingResponse, error) {
	out := new(QueryBindingResponse)
	err := c.cc.Invoke(ctx, Query_Binding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bindings(ctx context.Context, in *QueryBindingsRequest, opts ...grpc.CallOption) (*QueryBindingsResponse, error) {
	out := new(QueryBindingsResponse)
	err := c.cc.Invoke(ctx, Query_Bindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawAddress(ctx context.Context, in *QueryWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryWithdrawAddressResponse, error) {
	out := new(QueryWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, Query_WithdrawAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestContext(ctx context.Context, in *QueryRequestContextRequest, opts ...grpc.CallOption) (*QueryRequestContextResponse, error) {
	out := new(QueryRequestContextResponse)
	err := c.cc.Invoke(ctx, Query_RequestContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Request(ctx context.Context, in *QueryRequestRequest, opts ...grpc.CallOption) (*QueryRequestResponse, error) {
	out := new(QueryRequestResponse)
	err := c.cc.Invoke(ctx, Query_Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Requests(ctx context.Context, in *QueryRequestsRequest, opts ...grpc.CallOption) (*QueryRequestsResponse, error) {
	out := new(QueryRequestsResponse)
	err := c.cc.Invoke(ctx, Query_Requests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestsByReqCtx(ctx context.Context, in *QueryRequestsByReqCtxRequest, opts ...grpc.CallOption) (*QueryRequestsByReqCtxResponse, error) {
	out := new(QueryRequestsByReqCtxResponse)
	err := c.cc.Invoke(ctx, Query_RequestsByReqCtx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Response(ctx context.Context, in *QueryResponseRequest, opts ...grpc.CallOption) (*QueryResponseResponse, error) {
	out := new(QueryResponseResponse)
	err := c.cc.Invoke(ctx, Query_Response_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Responses(ctx context.Context, in *QueryResponsesRequest, opts ...grpc.CallOption) (*QueryResponsesResponse, error) {
	out := new(QueryResponsesResponse)
	err := c.cc.Invoke(ctx, Query_Responses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EarnedFees(ctx context.Context, in *QueryEarnedFeesRequest, opts ...grpc.CallOption) (*QueryEarnedFeesResponse, error) {
	out := new(QueryEarnedFeesResponse)
	err := c.cc.Invoke(ctx, Query_EarnedFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Schema(ctx context.Context, in *QuerySchemaRequest, opts ...grpc.CallOption) (*QuerySchemaResponse, error) {
	out := new(QuerySchemaResponse)
	err := c.cc.Invoke(ctx, Query_Schema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Definition returns service definition
	Definition(context.Context, *QueryDefinitionRequest) (*QueryDefinitionResponse, error)
	// Binding returns service Binding with service name and provider
	Binding(context.Context, *QueryBindingRequest) (*QueryBindingResponse, error)
	// Bindings returns all service Bindings with service name and owner
	Bindings(context.Context, *QueryBindingsRequest) (*QueryBindingsResponse, error)
	// WithdrawAddress returns the withdraw address of the binding owner
	WithdrawAddress(context.Context, *QueryWithdrawAddressRequest) (*QueryWithdrawAddressResponse, error)
	// RequestContext returns the request context
	RequestContext(context.Context, *QueryRequestContextRequest) (*QueryRequestContextResponse, error)
	// Request returns the request
	Request(context.Context, *QueryRequestRequest) (*QueryRequestResponse, error)
	// Request returns all requests of one service with provider
	Requests(context.Context, *QueryRequestsRequest) (*QueryRequestsResponse, error)
	// RequestsByReqCtx returns all requests of one service call batch
	RequestsByReqCtx(context.Context, *QueryRequestsByReqCtxRequest) (*QueryRequestsByReqCtxResponse, error)
	// Response returns the response of request
	Response(context.Context, *QueryResponseRequest) (*QueryResponseResponse, error)
	// Responses returns all responses of one service call batch
	Responses(context.Context, *QueryResponsesRequest) (*QueryResponsesResponse, error)
	// EarnedFees returns the earned service fee of one provider
	EarnedFees(context.Context, *QueryEarnedFeesRequest) (*QueryEarnedFeesResponse, error)
	// Schema returns the schema
	Schema(context.Context, *QuerySchemaRequest) (*QuerySchemaResponse, error)
	// Params queries the service parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Definition(context.Context, *QueryDefinitionRequest) (*QueryDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Definition not implemented")
}
func (UnimplementedQueryServer) Binding(context.Context, *QueryBindingRequest) (*QueryBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Binding not implemented")
}
func (UnimplementedQueryServer) Bindings(context.Context, *QueryBindingsRequest) (*QueryBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bindings not implemented")
}
func (UnimplementedQueryServer) WithdrawAddress(context.Context, *QueryWithdrawAddressRequest) (*QueryWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAddress not implemented")
}
func (UnimplementedQueryServer) RequestContext(context.Context, *QueryRequestContextRequest) (*QueryRequestContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestContext not implemented")
}
func (UnimplementedQueryServer) Request(context.Context, *QueryRequestRequest) (*QueryRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedQueryServer) Requests(context.Context, *QueryRequestsRequest) (*QueryRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Requests not implemented")
}
func (UnimplementedQueryServer) RequestsByReqCtx(context.Context, *QueryRequestsByReqCtxRequest) (*QueryRequestsByReqCtxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestsByReqCtx not implemented")
}
func (UnimplementedQueryServer) Response(context.Context, *QueryResponseRequest) (*QueryResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response not implemented")
}
func (UnimplementedQueryServer) Responses(context.Context, *QueryResponsesRequest) (*QueryResponsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Responses not implemented")
}
func (UnimplementedQueryServer) EarnedFees(context.Context, *QueryEarnedFeesRequest) (*QueryEarnedFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnedFees not implemented")
}
func (UnimplementedQueryServer) Schema(context.Context, *QuerySchemaRequest) (*QuerySchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Definition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Definition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Definition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Definition(ctx, req.(*QueryDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Binding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Binding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Binding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Binding(ctx, req.(*QueryBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Bindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bindings(ctx, req.(*QueryBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WithdrawAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawAddress(ctx, req.(*QueryWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RequestContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestContext(ctx, req.(*QueryRequestContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Request(ctx, req.(*QueryRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Requests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Requests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Requests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Requests(ctx, req.(*QueryRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestsByReqCtx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestsByReqCtxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestsByReqCtx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RequestsByReqCtx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestsByReqCtx(ctx, req.(*QueryRequestsByReqCtxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Response_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Response(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Response_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Response(ctx, req.(*QueryResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Responses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Responses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Responses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Responses(ctx, req.(*QueryResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EarnedFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEarnedFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EarnedFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EarnedFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EarnedFees(ctx, req.(*QueryEarnedFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Schema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Schema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Schema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Schema(ctx, req.(*QuerySchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.service.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Definition",
			Handler:    _Query_Definition_Handler,
		},
		{
			MethodName: "Binding",
			Handler:    _Query_Binding_Handler,
		},
		{
			MethodName: "Bindings",
			Handler:    _Query_Bindings_Handler,
		},
		{
			MethodName: "WithdrawAddress",
			Handler:    _Query_WithdrawAddress_Handler,
		},
		{
			MethodName: "RequestContext",
			Handler:    _Query_RequestContext_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Query_Request_Handler,
		},
		{
			MethodName: "Requests",
			Handler:    _Query_Requests_Handler,
		},
		{
			MethodName: "RequestsByReqCtx",
			Handler:    _Query_RequestsByReqCtx_Handler,
		},
		{
			MethodName: "Response",
			Handler:    _Query_Response_Handler,
		},
		{
			MethodName: "Responses",
			Handler:    _Query_Responses_Handler,
		},
		{
			MethodName: "EarnedFees",
			Handler:    _Query_EarnedFees_Handler,
		},
		{
			MethodName: "Schema",
			Handler:    _Query_Schema_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irismod/service/query.proto",
}
