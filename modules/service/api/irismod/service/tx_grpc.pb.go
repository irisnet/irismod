// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: irismod/service/tx.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_DefineService_FullMethodName         = "/irismod.service.Msg/DefineService"
	Msg_BindService_FullMethodName           = "/irismod.service.Msg/BindService"
	Msg_UpdateServiceBinding_FullMethodName  = "/irismod.service.Msg/UpdateServiceBinding"
	Msg_SetWithdrawAddress_FullMethodName    = "/irismod.service.Msg/SetWithdrawAddress"
	Msg_EnableServiceBinding_FullMethodName  = "/irismod.service.Msg/EnableServiceBinding"
	Msg_DisableServiceBinding_FullMethodName = "/irismod.service.Msg/DisableServiceBinding"
	Msg_RefundServiceDeposit_FullMethodName  = "/irismod.service.Msg/RefundServiceDeposit"
	Msg_CallService_FullMethodName           = "/irismod.service.Msg/CallService"
	Msg_RespondService_FullMethodName        = "/irismod.service.Msg/RespondService"
	Msg_PauseRequestContext_FullMethodName   = "/irismod.service.Msg/PauseRequestContext"
	Msg_StartRequestContext_FullMethodName   = "/irismod.service.Msg/StartRequestContext"
	Msg_KillRequestContext_FullMethodName    = "/irismod.service.Msg/KillRequestContext"
	Msg_UpdateRequestContext_FullMethodName  = "/irismod.service.Msg/UpdateRequestContext"
	Msg_WithdrawEarnedFees_FullMethodName    = "/irismod.service.Msg/WithdrawEarnedFees"
	Msg_UpdateParams_FullMethodName          = "/irismod.service.Msg/UpdateParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// DefineService defines a method for define a new service
	DefineService(ctx context.Context, in *MsgDefineService, opts ...grpc.CallOption) (*MsgDefineServiceResponse, error)
	// BindService defines a method for bind a server
	BindService(ctx context.Context, in *MsgBindService, opts ...grpc.CallOption) (*MsgBindServiceResponse, error)
	// UpdateServiceBinding defines a method for update a service binding
	UpdateServiceBinding(ctx context.Context, in *MsgUpdateServiceBinding, opts ...grpc.CallOption) (*MsgUpdateServiceBindingResponse, error)
	// SetWithdrawAddress defines a method for setting a withdraw address
	SetWithdrawAddress(ctx context.Context, in *MsgSetWithdrawAddress, opts ...grpc.CallOption) (*MsgSetWithdrawAddressResponse, error)
	// EnableServiceBinding defines a method for enabling a service binding
	EnableServiceBinding(ctx context.Context, in *MsgEnableServiceBinding, opts ...grpc.CallOption) (*MsgEnableServiceBindingResponse, error)
	// DisableServiceBinding defines a method for disabling a service binding
	DisableServiceBinding(ctx context.Context, in *MsgDisableServiceBinding, opts ...grpc.CallOption) (*MsgDisableServiceBindingResponse, error)
	// RefundServiceDeposit defines a method for refunding a fee
	RefundServiceDeposit(ctx context.Context, in *MsgRefundServiceDeposit, opts ...grpc.CallOption) (*MsgRefundServiceDepositResponse, error)
	// CallService defines a method for calling a service
	CallService(ctx context.Context, in *MsgCallService, opts ...grpc.CallOption) (*MsgCallServiceResponse, error)
	// RespondService defines a method for responding a service
	RespondService(ctx context.Context, in *MsgRespondService, opts ...grpc.CallOption) (*MsgRespondServiceResponse, error)
	// PauseRequestContext defines a method for pausing a service call
	PauseRequestContext(ctx context.Context, in *MsgPauseRequestContext, opts ...grpc.CallOption) (*MsgPauseRequestContextResponse, error)
	// StartRequestContext defines a method for starting a service call
	StartRequestContext(ctx context.Context, in *MsgStartRequestContext, opts ...grpc.CallOption) (*MsgStartRequestContextResponse, error)
	// KillRequestContext defines a method for killing a service call
	KillRequestContext(ctx context.Context, in *MsgKillRequestContext, opts ...grpc.CallOption) (*MsgKillRequestContextResponse, error)
	// UpdateRequestContext defines a method for updating a service call
	UpdateRequestContext(ctx context.Context, in *MsgUpdateRequestContext, opts ...grpc.CallOption) (*MsgUpdateRequestContextResponse, error)
	// WithdrawEarnedFees defines a method for Withdrawing a earned fees
	WithdrawEarnedFees(ctx context.Context, in *MsgWithdrawEarnedFees, opts ...grpc.CallOption) (*MsgWithdrawEarnedFeesResponse, error)
	// UpdateParams defines a governance operation for updating the x/service
	// module parameters. The authority is defined in the keeper.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DefineService(ctx context.Context, in *MsgDefineService, opts ...grpc.CallOption) (*MsgDefineServiceResponse, error) {
	out := new(MsgDefineServiceResponse)
	err := c.cc.Invoke(ctx, Msg_DefineService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BindService(ctx context.Context, in *MsgBindService, opts ...grpc.CallOption) (*MsgBindServiceResponse, error) {
	out := new(MsgBindServiceResponse)
	err := c.cc.Invoke(ctx, Msg_BindService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateServiceBinding(ctx context.Context, in *MsgUpdateServiceBinding, opts ...grpc.CallOption) (*MsgUpdateServiceBindingResponse, error) {
	out := new(MsgUpdateServiceBindingResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetWithdrawAddress(ctx context.Context, in *MsgSetWithdrawAddress, opts ...grpc.CallOption) (*MsgSetWithdrawAddressResponse, error) {
	out := new(MsgSetWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, Msg_SetWithdrawAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnableServiceBinding(ctx context.Context, in *MsgEnableServiceBinding, opts ...grpc.CallOption) (*MsgEnableServiceBindingResponse, error) {
	out := new(MsgEnableServiceBindingResponse)
	err := c.cc.Invoke(ctx, Msg_EnableServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableServiceBinding(ctx context.Context, in *MsgDisableServiceBinding, opts ...grpc.CallOption) (*MsgDisableServiceBindingResponse, error) {
	out := new(MsgDisableServiceBindingResponse)
	err := c.cc.Invoke(ctx, Msg_DisableServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RefundServiceDeposit(ctx context.Context, in *MsgRefundServiceDeposit, opts ...grpc.CallOption) (*MsgRefundServiceDepositResponse, error) {
	out := new(MsgRefundServiceDepositResponse)
	err := c.cc.Invoke(ctx, Msg_RefundServiceDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CallService(ctx context.Context, in *MsgCallService, opts ...grpc.CallOption) (*MsgCallServiceResponse, error) {
	out := new(MsgCallServiceResponse)
	err := c.cc.Invoke(ctx, Msg_CallService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RespondService(ctx context.Context, in *MsgRespondService, opts ...grpc.CallOption) (*MsgRespondServiceResponse, error) {
	out := new(MsgRespondServiceResponse)
	err := c.cc.Invoke(ctx, Msg_RespondService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseRequestContext(ctx context.Context, in *MsgPauseRequestContext, opts ...grpc.CallOption) (*MsgPauseRequestContextResponse, error) {
	out := new(MsgPauseRequestContextResponse)
	err := c.cc.Invoke(ctx, Msg_PauseRequestContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartRequestContext(ctx context.Context, in *MsgStartRequestContext, opts ...grpc.CallOption) (*MsgStartRequestContextResponse, error) {
	out := new(MsgStartRequestContextResponse)
	err := c.cc.Invoke(ctx, Msg_StartRequestContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KillRequestContext(ctx context.Context, in *MsgKillRequestContext, opts ...grpc.CallOption) (*MsgKillRequestContextResponse, error) {
	out := new(MsgKillRequestContextResponse)
	err := c.cc.Invoke(ctx, Msg_KillRequestContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequestContext(ctx context.Context, in *MsgUpdateRequestContext, opts ...grpc.CallOption) (*MsgUpdateRequestContextResponse, error) {
	out := new(MsgUpdateRequestContextResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRequestContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawEarnedFees(ctx context.Context, in *MsgWithdrawEarnedFees, opts ...grpc.CallOption) (*MsgWithdrawEarnedFeesResponse, error) {
	out := new(MsgWithdrawEarnedFeesResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawEarnedFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// DefineService defines a method for define a new service
	DefineService(context.Context, *MsgDefineService) (*MsgDefineServiceResponse, error)
	// BindService defines a method for bind a server
	BindService(context.Context, *MsgBindService) (*MsgBindServiceResponse, error)
	// UpdateServiceBinding defines a method for update a service binding
	UpdateServiceBinding(context.Context, *MsgUpdateServiceBinding) (*MsgUpdateServiceBindingResponse, error)
	// SetWithdrawAddress defines a method for setting a withdraw address
	SetWithdrawAddress(context.Context, *MsgSetWithdrawAddress) (*MsgSetWithdrawAddressResponse, error)
	// EnableServiceBinding defines a method for enabling a service binding
	EnableServiceBinding(context.Context, *MsgEnableServiceBinding) (*MsgEnableServiceBindingResponse, error)
	// DisableServiceBinding defines a method for disabling a service binding
	DisableServiceBinding(context.Context, *MsgDisableServiceBinding) (*MsgDisableServiceBindingResponse, error)
	// RefundServiceDeposit defines a method for refunding a fee
	RefundServiceDeposit(context.Context, *MsgRefundServiceDeposit) (*MsgRefundServiceDepositResponse, error)
	// CallService defines a method for calling a service
	CallService(context.Context, *MsgCallService) (*MsgCallServiceResponse, error)
	// RespondService defines a method for responding a service
	RespondService(context.Context, *MsgRespondService) (*MsgRespondServiceResponse, error)
	// PauseRequestContext defines a method for pausing a service call
	PauseRequestContext(context.Context, *MsgPauseRequestContext) (*MsgPauseRequestContextResponse, error)
	// StartRequestContext defines a method for starting a service call
	StartRequestContext(context.Context, *MsgStartRequestContext) (*MsgStartRequestContextResponse, error)
	// KillRequestContext defines a method for killing a service call
	KillRequestContext(context.Context, *MsgKillRequestContext) (*MsgKillRequestContextResponse, error)
	// UpdateRequestContext defines a method for updating a service call
	UpdateRequestContext(context.Context, *MsgUpdateRequestContext) (*MsgUpdateRequestContextResponse, error)
	// WithdrawEarnedFees defines a method for Withdrawing a earned fees
	WithdrawEarnedFees(context.Context, *MsgWithdrawEarnedFees) (*MsgWithdrawEarnedFeesResponse, error)
	// UpdateParams defines a governance operation for updating the x/service
	// module parameters. The authority is defined in the keeper.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) DefineService(context.Context, *MsgDefineService) (*MsgDefineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineService not implemented")
}
func (UnimplementedMsgServer) BindService(context.Context, *MsgBindService) (*MsgBindServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindService not implemented")
}
func (UnimplementedMsgServer) UpdateServiceBinding(context.Context, *MsgUpdateServiceBinding) (*MsgUpdateServiceBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceBinding not implemented")
}
func (UnimplementedMsgServer) SetWithdrawAddress(context.Context, *MsgSetWithdrawAddress) (*MsgSetWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWithdrawAddress not implemented")
}
func (UnimplementedMsgServer) EnableServiceBinding(context.Context, *MsgEnableServiceBinding) (*MsgEnableServiceBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServiceBinding not implemented")
}
func (UnimplementedMsgServer) DisableServiceBinding(context.Context, *MsgDisableServiceBinding) (*MsgDisableServiceBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServiceBinding not implemented")
}
func (UnimplementedMsgServer) RefundServiceDeposit(context.Context, *MsgRefundServiceDeposit) (*MsgRefundServiceDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundServiceDeposit not implemented")
}
func (UnimplementedMsgServer) CallService(context.Context, *MsgCallService) (*MsgCallServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallService not implemented")
}
func (UnimplementedMsgServer) RespondService(context.Context, *MsgRespondService) (*MsgRespondServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondService not implemented")
}
func (UnimplementedMsgServer) PauseRequestContext(context.Context, *MsgPauseRequestContext) (*MsgPauseRequestContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseRequestContext not implemented")
}
func (UnimplementedMsgServer) StartRequestContext(context.Context, *MsgStartRequestContext) (*MsgStartRequestContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRequestContext not implemented")
}
func (UnimplementedMsgServer) KillRequestContext(context.Context, *MsgKillRequestContext) (*MsgKillRequestContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillRequestContext not implemented")
}
func (UnimplementedMsgServer) UpdateRequestContext(context.Context, *MsgUpdateRequestContext) (*MsgUpdateRequestContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequestContext not implemented")
}
func (UnimplementedMsgServer) WithdrawEarnedFees(context.Context, *MsgWithdrawEarnedFees) (*MsgWithdrawEarnedFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawEarnedFees not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_DefineService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDefineService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DefineService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DefineService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DefineService(ctx, req.(*MsgDefineService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBindService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BindService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BindService(ctx, req.(*MsgBindService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateServiceBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateServiceBinding(ctx, req.(*MsgUpdateServiceBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetWithdrawAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetWithdrawAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetWithdrawAddress(ctx, req.(*MsgSetWithdrawAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnableServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnableServiceBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnableServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_EnableServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnableServiceBinding(ctx, req.(*MsgEnableServiceBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableServiceBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DisableServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableServiceBinding(ctx, req.(*MsgDisableServiceBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RefundServiceDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundServiceDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundServiceDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RefundServiceDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundServiceDeposit(ctx, req.(*MsgRefundServiceDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCallService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CallService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CallService(ctx, req.(*MsgCallService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RespondService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRespondService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RespondService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RespondService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RespondService(ctx, req.(*MsgRespondService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseRequestContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseRequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseRequestContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseRequestContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseRequestContext(ctx, req.(*MsgPauseRequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartRequestContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartRequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartRequestContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StartRequestContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartRequestContext(ctx, req.(*MsgStartRequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KillRequestContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKillRequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KillRequestContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_KillRequestContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KillRequestContext(ctx, req.(*MsgKillRequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequestContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequestContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRequestContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequestContext(ctx, req.(*MsgUpdateRequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawEarnedFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawEarnedFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawEarnedFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawEarnedFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawEarnedFees(ctx, req.(*MsgWithdrawEarnedFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.service.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineService",
			Handler:    _Msg_DefineService_Handler,
		},
		{
			MethodName: "BindService",
			Handler:    _Msg_BindService_Handler,
		},
		{
			MethodName: "UpdateServiceBinding",
			Handler:    _Msg_UpdateServiceBinding_Handler,
		},
		{
			MethodName: "SetWithdrawAddress",
			Handler:    _Msg_SetWithdrawAddress_Handler,
		},
		{
			MethodName: "EnableServiceBinding",
			Handler:    _Msg_EnableServiceBinding_Handler,
		},
		{
			MethodName: "DisableServiceBinding",
			Handler:    _Msg_DisableServiceBinding_Handler,
		},
		{
			MethodName: "RefundServiceDeposit",
			Handler:    _Msg_RefundServiceDeposit_Handler,
		},
		{
			MethodName: "CallService",
			Handler:    _Msg_CallService_Handler,
		},
		{
			MethodName: "RespondService",
			Handler:    _Msg_RespondService_Handler,
		},
		{
			MethodName: "PauseRequestContext",
			Handler:    _Msg_PauseRequestContext_Handler,
		},
		{
			MethodName: "StartRequestContext",
			Handler:    _Msg_StartRequestContext_Handler,
		},
		{
			MethodName: "KillRequestContext",
			Handler:    _Msg_KillRequestContext_Handler,
		},
		{
			MethodName: "UpdateRequestContext",
			Handler:    _Msg_UpdateRequestContext_Handler,
		},
		{
			MethodName: "WithdrawEarnedFees",
			Handler:    _Msg_WithdrawEarnedFees_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irismod/service/tx.proto",
}
