// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: farm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPoolsRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{0}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

func (m *QueryPoolsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FarmPoolEntry struct {
	Name               string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owner              string                                   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	BeginHeight        uint64                                   `protobuf:"varint,3,opt,name=begin_height,json=beginHeight,proto3" json:"begin_height,omitempty"`
	EndHeight          uint64                                   `protobuf:"varint,4,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	Destructible       bool                                     `protobuf:"varint,5,opt,name=destructible,proto3" json:"destructible,omitempty"`
	Expired            bool                                     `protobuf:"varint,6,opt,name=expired,proto3" json:"expired,omitempty"`
	TotalLpTokenLocked github_com_cosmos_cosmos_sdk_types.Coin  `protobuf:"bytes,7,opt,name=total_lp_token_locked,json=totalLpTokenLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_lp_token_locked"`
	TotalReward        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=total_reward,json=totalReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_reward"`
	RemainingReward    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=remaining_reward,json=remainingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"remaining_reward"`
	RewardPerBlock     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=reward_per_block,json=rewardPerBlock,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_per_block"`
}

func (m *FarmPoolEntry) Reset()         { *m = FarmPoolEntry{} }
func (m *FarmPoolEntry) String() string { return proto.CompactTextString(m) }
func (*FarmPoolEntry) ProtoMessage()    {}
func (*FarmPoolEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{1}
}
func (m *FarmPoolEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FarmPoolEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FarmPoolEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FarmPoolEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FarmPoolEntry.Merge(m, src)
}
func (m *FarmPoolEntry) XXX_Size() int {
	return m.Size()
}
func (m *FarmPoolEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FarmPoolEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FarmPoolEntry proto.InternalMessageInfo

func (m *FarmPoolEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FarmPoolEntry) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *FarmPoolEntry) GetBeginHeight() uint64 {
	if m != nil {
		return m.BeginHeight
	}
	return 0
}

func (m *FarmPoolEntry) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *FarmPoolEntry) GetDestructible() bool {
	if m != nil {
		return m.Destructible
	}
	return false
}

func (m *FarmPoolEntry) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *FarmPoolEntry) GetTotalReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalReward
	}
	return nil
}

func (m *FarmPoolEntry) GetRemainingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RemainingReward
	}
	return nil
}

func (m *FarmPoolEntry) GetRewardPerBlock() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardPerBlock
	}
	return nil
}

type QueryPoolsResponse struct {
	List []*FarmPoolEntry `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{2}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetList() []*FarmPoolEntry {
	if m != nil {
		return m.List
	}
	return nil
}

type QueryFarmersRequest struct {
	Farmer   string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	PoolName string `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
}

func (m *QueryFarmersRequest) Reset()         { *m = QueryFarmersRequest{} }
func (m *QueryFarmersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFarmersRequest) ProtoMessage()    {}
func (*QueryFarmersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{3}
}
func (m *QueryFarmersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmersRequest.Merge(m, src)
}
func (m *QueryFarmersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmersRequest proto.InternalMessageInfo

func (m *QueryFarmersRequest) GetFarmer() string {
	if m != nil {
		return m.Farmer
	}
	return ""
}

func (m *QueryFarmersRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

type QueryFarmersResponse struct {
	List   []*LockedInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Height int64         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryFarmersResponse) Reset()         { *m = QueryFarmersResponse{} }
func (m *QueryFarmersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFarmersResponse) ProtoMessage()    {}
func (*QueryFarmersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{4}
}
func (m *QueryFarmersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFarmersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFarmersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFarmersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFarmersResponse.Merge(m, src)
}
func (m *QueryFarmersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFarmersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFarmersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFarmersResponse proto.InternalMessageInfo

func (m *QueryFarmersResponse) GetList() []*LockedInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryFarmersResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type LockedInfo struct {
	PoolName      string                                   `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	Locked        uint64                                   `protobuf:"varint,2,opt,name=locked,proto3" json:"locked,omitempty"`
	PendingReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=pending_reward,json=pendingReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pending_reward"`
}

func (m *LockedInfo) Reset()         { *m = LockedInfo{} }
func (m *LockedInfo) String() string { return proto.CompactTextString(m) }
func (*LockedInfo) ProtoMessage()    {}
func (*LockedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51f119660179f9, []int{5}
}
func (m *LockedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedInfo.Merge(m, src)
}
func (m *LockedInfo) XXX_Size() int {
	return m.Size()
}
func (m *LockedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LockedInfo proto.InternalMessageInfo

func (m *LockedInfo) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *LockedInfo) GetLocked() uint64 {
	if m != nil {
		return m.Locked
	}
	return 0
}

func (m *LockedInfo) GetPendingReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PendingReward
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolsRequest)(nil), "irismod.farm.QueryPoolsRequest")
	proto.RegisterType((*FarmPoolEntry)(nil), "irismod.farm.FarmPoolEntry")
	proto.RegisterType((*QueryPoolsResponse)(nil), "irismod.farm.QueryPoolsResponse")
	proto.RegisterType((*QueryFarmersRequest)(nil), "irismod.farm.QueryFarmersRequest")
	proto.RegisterType((*QueryFarmersResponse)(nil), "irismod.farm.QueryFarmersResponse")
	proto.RegisterType((*LockedInfo)(nil), "irismod.farm.LockedInfo")
}

func init() { proto.RegisterFile("farm/query.proto", fileDescriptor_3e51f119660179f9) }

var fileDescriptor_3e51f119660179f9 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0xbb, 0xb4, 0x05, 0x3a, 0x14, 0xc4, 0xa1, 0x90, 0xb5, 0x60, 0x5b, 0xf6, 0x42, 0x0f,
	0xb2, 0x2b, 0xf8, 0x0d, 0x30, 0xf8, 0x16, 0x62, 0x70, 0xe3, 0xc9, 0x98, 0x34, 0xdb, 0xee, 0xc3,
	0x32, 0x61, 0x77, 0x66, 0x99, 0x99, 0x82, 0x1c, 0xbc, 0xf8, 0x09, 0x4c, 0x3c, 0xf8, 0x1d, 0xbc,
	0xfb, 0x1d, 0x38, 0x92, 0x78, 0x31, 0x1e, 0x90, 0x80, 0x1f, 0xc4, 0xcc, 0x0b, 0xd8, 0x8d, 0x48,
	0x3c, 0x70, 0xda, 0x99, 0xe7, 0xf9, 0xef, 0xf3, 0x7b, 0xf2, 0xbc, 0x0c, 0x9a, 0xdd, 0x89, 0x78,
	0x16, 0xec, 0x0f, 0x81, 0x1f, 0xf9, 0x39, 0x67, 0x92, 0xe1, 0x3a, 0xe1, 0x44, 0x64, 0x2c, 0xf6,
	0x95, 0xa7, 0xd9, 0x1a, 0x30, 0x91, 0x31, 0x11, 0xf4, 0x23, 0x01, 0xc1, 0xc1, 0x5a, 0x1f, 0x64,
	0xb4, 0x16, 0x0c, 0x18, 0xa1, 0x46, 0xdd, 0x6c, 0x24, 0x2c, 0x61, 0xfa, 0x18, 0xa8, 0x93, 0xb5,
	0x2e, 0x25, 0x8c, 0x25, 0x29, 0x04, 0x51, 0x4e, 0x82, 0x88, 0x52, 0x26, 0x23, 0x49, 0x18, 0x15,
	0xc6, 0xeb, 0xad, 0xa0, 0xbb, 0xaf, 0x14, 0x70, 0x9b, 0xb1, 0x54, 0x84, 0xb0, 0x3f, 0x04, 0x21,
	0x31, 0x46, 0x15, 0x1a, 0x65, 0xe0, 0x3a, 0x1d, 0xa7, 0x5b, 0x0b, 0xf5, 0xd9, 0xfb, 0x5c, 0x45,
	0xd3, 0x4f, 0x22, 0x9e, 0x29, 0xe1, 0x26, 0x95, 0xfc, 0xe8, 0x3a, 0x15, 0x6e, 0xa0, 0x2a, 0x3b,
	0xa4, 0xc0, 0xdd, 0x31, 0x6d, 0x34, 0x17, 0xbc, 0x8c, 0xea, 0x7d, 0x48, 0x08, 0xed, 0xed, 0x02,
	0x49, 0x76, 0xa5, 0x5b, 0xee, 0x38, 0xdd, 0x4a, 0x38, 0xa5, 0x6d, 0xcf, 0xb4, 0x09, 0xdf, 0x47,
	0x08, 0x68, 0x7c, 0x29, 0xa8, 0x68, 0x41, 0x0d, 0x68, 0x6c, 0xdd, 0x1e, 0xaa, 0xc7, 0x20, 0x24,
	0x1f, 0x0e, 0x24, 0xe9, 0xa7, 0xe0, 0x56, 0x3b, 0x4e, 0x77, 0x32, 0x2c, 0xd8, 0xb0, 0x8b, 0x26,
	0xe0, 0x5d, 0x4e, 0x38, 0xc4, 0xee, 0xb8, 0x76, 0x5f, 0x5e, 0xf1, 0x7b, 0x34, 0x2f, 0x99, 0x8c,
	0xd2, 0x5e, 0x9a, 0xf7, 0x24, 0xdb, 0x03, 0xda, 0x4b, 0xd9, 0x60, 0x0f, 0x62, 0x77, 0xa2, 0xe3,
	0x74, 0xa7, 0xd6, 0xef, 0xf9, 0xa6, 0xb0, 0xbe, 0x2a, 0xac, 0x6f, 0x0b, 0xeb, 0x3f, 0x66, 0x84,
	0x6e, 0x04, 0xc7, 0xa7, 0xed, 0xd2, 0x8f, 0xd3, 0xf6, 0x4a, 0x42, 0xe4, 0xee, 0xb0, 0xef, 0x0f,
	0x58, 0x16, 0xd8, 0x2e, 0x98, 0xcf, 0xaa, 0x88, 0xf7, 0x02, 0x79, 0x94, 0x83, 0xd0, 0x3f, 0x84,
	0x58, 0x83, 0xb6, 0xf2, 0xd7, 0x0a, 0xb3, 0xa5, 0x29, 0x98, 0xa2, 0xba, 0xc1, 0x73, 0x38, 0x8c,
	0x78, 0xec, 0x4e, 0x76, 0xca, 0x37, 0x53, 0x1f, 0x2a, 0xea, 0x97, 0x9f, 0xed, 0xee, 0x7f, 0x52,
	0x45, 0x38, 0xa5, 0x01, 0xa1, 0x8e, 0x8f, 0x0f, 0xd0, 0x2c, 0x87, 0x2c, 0x22, 0x94, 0xd0, 0xe4,
	0x92, 0x59, 0xbb, 0x7d, 0xe6, 0x9d, 0x2b, 0x88, 0xe5, 0x0e, 0x15, 0x57, 0x9d, 0x7a, 0x39, 0xf0,
	0x5e, 0x5f, 0xd5, 0xd8, 0x45, 0xb7, 0xcf, 0x9d, 0x31, 0x90, 0x6d, 0xe0, 0x1b, 0x0a, 0xe1, 0x6d,
	0x22, 0x3c, 0x3a, 0xc2, 0x22, 0x67, 0x54, 0x00, 0x0e, 0x50, 0x25, 0x25, 0x42, 0xba, 0x8e, 0x4e,
	0x60, 0xd1, 0x1f, 0xdd, 0x24, 0xbf, 0x30, 0xc8, 0xa1, 0x16, 0x7a, 0x2f, 0xd0, 0x9c, 0x0e, 0xa3,
	0x7c, 0xc0, 0xaf, 0x76, 0x61, 0x01, 0x8d, 0xef, 0x68, 0x8b, 0x9d, 0x73, 0x7b, 0xc3, 0x8b, 0xa8,
	0x96, 0x33, 0x96, 0xf6, 0xf4, 0x0a, 0x98, 0x69, 0x9f, 0x54, 0x86, 0x97, 0x6a, 0x59, 0xde, 0xa2,
	0x46, 0x31, 0x96, 0x4d, 0xea, 0x41, 0x21, 0x29, 0xb7, 0x98, 0x94, 0x99, 0x96, 0xe7, 0x74, 0x87,
	0x99, 0x8c, 0x14, 0xda, 0xee, 0x83, 0x8a, 0x5f, 0x0e, 0xed, 0xcd, 0xfb, 0xea, 0x20, 0xf4, 0x47,
	0x5c, 0xcc, 0xc4, 0x29, 0x66, 0xa2, 0x62, 0xd8, 0x59, 0x1f, 0xd3, 0x3b, 0x65, 0x6f, 0x98, 0xa3,
	0x99, 0x1c, 0x68, 0x3c, 0x32, 0x21, 0xe5, 0xdb, 0xef, 0xd4, 0xb4, 0x45, 0x98, 0xf9, 0x58, 0x3f,
	0x73, 0x50, 0x55, 0x97, 0x05, 0x27, 0xa8, 0xaa, 0xbb, 0x85, 0xdb, 0xc5, 0x12, 0xfc, 0xf5, 0x14,
	0x35, 0x3b, 0xff, 0x16, 0x98, 0x9a, 0x7a, 0x8b, 0x1f, 0xbe, 0xfd, 0xfa, 0x34, 0x36, 0x8f, 0xe7,
	0x02, 0xab, 0x0c, 0xf4, 0x33, 0x9a, 0xeb, 0xf8, 0x14, 0x4d, 0xd8, 0x1e, 0xe0, 0xe5, 0x6b, 0x22,
	0x15, 0x7b, 0xdd, 0xf4, 0x6e, 0x92, 0x58, 0xdc, 0x92, 0xc6, 0x2d, 0xe0, 0x46, 0x11, 0x67, 0xa6,
	0x62, 0xe3, 0xe9, 0xf1, 0x79, 0xcb, 0x39, 0x39, 0x6f, 0x39, 0x67, 0xe7, 0x2d, 0xe7, 0xe3, 0x45,
	0xab, 0x74, 0x72, 0xd1, 0x2a, 0x7d, 0xbf, 0x68, 0x95, 0xde, 0xac, 0x8e, 0x54, 0x4d, 0xfd, 0x49,
	0x41, 0x5e, 0x45, 0xc8, 0x58, 0x3c, 0x4c, 0x41, 0x98, 0x48, 0xba, 0x80, 0xfd, 0x71, 0xfd, 0x3c,
	0x3f, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x41, 0xba, 0x4e, 0x84, 0x14, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	Farmers(ctx context.Context, in *QueryFarmersRequest, opts ...grpc.CallOption) (*QueryFarmersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Farmers(ctx context.Context, in *QueryFarmersRequest, opts ...grpc.CallOption) (*QueryFarmersResponse, error) {
	out := new(QueryFarmersResponse)
	err := c.cc.Invoke(ctx, "/irismod.farm.Query/Farmers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	Farmers(context.Context, *QueryFarmersRequest) (*QueryFarmersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) Farmers(ctx context.Context, req *QueryFarmersRequest) (*QueryFarmersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Farmers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Farmers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFarmersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Farmers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irismod.farm.Query/Farmers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Farmers(ctx, req.(*QueryFarmersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "irismod.farm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "Farmers",
			Handler:    _Query_Farmers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farm/query.proto",
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FarmPoolEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FarmPoolEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FarmPoolEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPerBlock) > 0 {
		for iNdEx := len(m.RewardPerBlock) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPerBlock[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RemainingReward) > 0 {
		for iNdEx := len(m.RemainingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemainingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.TotalReward) > 0 {
		for iNdEx := len(m.TotalReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.TotalLpTokenLocked.Size()
		i -= size
		if _, err := m.TotalLpTokenLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Destructible {
		i--
		if m.Destructible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EndHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeginHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFarmersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFarmersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFarmersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingReward) > 0 {
		for iNdEx := len(m.PendingReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Locked != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Locked))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FarmPoolEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BeginHeight != 0 {
		n += 1 + sovQuery(uint64(m.BeginHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndHeight))
	}
	if m.Destructible {
		n += 2
	}
	if m.Expired {
		n += 2
	}
	l = m.TotalLpTokenLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TotalReward) > 0 {
		for _, e := range m.TotalReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RemainingReward) > 0 {
		for _, e := range m.RemainingReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.RewardPerBlock) > 0 {
		for _, e := range m.RewardPerBlock {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFarmersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFarmersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *LockedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Locked != 0 {
		n += 1 + sovQuery(uint64(m.Locked))
	}
	if len(m.PendingReward) > 0 {
		for _, e := range m.PendingReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FarmPoolEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FarmPoolEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FarmPoolEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginHeight", wireType)
			}
			m.BeginHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destructible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Destructible = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLpTokenLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLpTokenLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalReward = append(m.TotalReward, types.Coin{})
			if err := m.TotalReward[len(m.TotalReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingReward = append(m.RemainingReward, types.Coin{})
			if err := m.RemainingReward[len(m.RemainingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPerBlock = append(m.RewardPerBlock, types.Coin{})
			if err := m.RewardPerBlock[len(m.RewardPerBlock)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FarmPoolEntry{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFarmersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFarmersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFarmersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LockedInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			m.Locked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingReward = append(m.PendingReward, types.Coin{})
			if err := m.PendingReward[len(m.PendingReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
